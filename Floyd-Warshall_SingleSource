// ConsoleApplication2.cpp : Defines the entry point for the console application.
//

#include "stdafx.h"

#include <iostream>
#include<conio.h>
#include <sstream>
#include<stdio.h>
#include<stdlib.h>
#include <queue>
#include <unordered_set>

using namespace std;
//https://www.geeksforgeeks.org/floyd-warshall-algorithm-dp-16/
// Floyd Varshall is used to find difference than 
// Run time - V *  V * V -- Because three iterations 
// Graph- Matrix implementation
// Floyd- Warshall - 1) While running, current node is considered as an intermediate node.  2) distance matrix is used for solution
// Bellman node - 2) While running node is considered as source vertex. 2) distance matrix is used for solution
// k is the intermediate vertex

// Number of vertices in the graph 
#define V 4 

#define max 4348 // dont give intmax as next iteation will yield negative 

/* Define maxinite as a large enough
value.This value will be used for
vertices not connected to each other */


void printSolution(int dist[][V])
{
	cout << "The following matrix shows the shortest distances"
		" between every pair of vertices \n";
	for (int i = 0; i < V; i++)
	{
		for (int j = 0; j < V; j++)
		{
			if (dist[i][j] == max)
				cout << "max" << "     ";
			else
				cout << dist[i][j] << "     ";
		}
		cout << endl;
	}
}



void FlyodWarshall(int graph[][V])
{

	int distance[V][V];
	// Step 1 -- Initialize the distance array with the current values


	for (int a = 0; a < V; a++)
	for (int b = 0; b < V; b++)
		distance[a][b] = graph[a][b];



	// Step 2 -- k iteration comes last --This is wrong because, when k is the final param  -- Because if the first intermediate vertex and all vertexes has to go through it first
	// Leasson = Dont use max because, that's the max limit so adding anymore will go negative
	for (int k = 0; k < V; k++)
	{
		for (int i = 0; i < V; i++)
		{
			for (int j = 0; j < V; j++)
			{
				if (distance[i][j] > distance[i][k] + distance[k][j])
					distance[i][j] = distance[i][k] + distance[k][j];
			}
		}
	}


	//	Just print
	printSolution(distance);

}


int main()
{
	// Matrix implmentation


	int graph[V][V] = {
		{ 0, 5, max, 10 },
		{ max, 0, 3, max },
		{ max, max, 0, 1 },
		{ max, max, max, 0 }
	};
	FlyodWarshall(graph);
	return 0;


}
