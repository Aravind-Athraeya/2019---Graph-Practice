
#include "stdafx.h"
#include <set>
#include <iostream>
#include<conio.h>
#include <sstream>
#include<stdio.h> 
#include<stdlib.h>
#include <queue>
#include <unordered_set>
#include <stack>
using namespace std;

//https://www.geeksforgeeks.org/given-sorted-dictionary-find-precedence-characters/

class Graph
{
	int V;
	list<int> *adj;
	void topologicalSortUtil(int v, bool visited[], stack<int> &Stack);

public:
	Graph(int V);
	void addEdge(int v, int w);
	void topologicalSort();
};

Graph::Graph(int V)
{
	this->V = V;
	adj = new list<int>[V]; //adjacency listsList - Pakathu veetu karan
}

void Graph::addEdge(int v, int w)
{
	adj[v].push_back(w); 
}

int min(int x, int y)
{
	return (x < y) ? x : y;
}


void Graph::topologicalSortUtil(int v, bool visited[], stack<int> &Stack)
{
	visited[v] = true;

	list<int>::iterator i;
	for (i = adj[v].begin(); i != adj[v].end(); ++i)
	if (!visited[*i])
		topologicalSortUtil(*i, visited, Stack);

	Stack.push(v);
}



void Graph::topologicalSort()
{
	stack<int> Stack;

	bool *visited = new bool[V];
	for (int i = 0; i < V; i++)
		visited[i] = false;

	for (int i = 0; i < V; i++)
	if (visited[i] == false)
		topologicalSortUtil(i, visited, Stack);

	while (Stack.empty() == false)
	{
		cout << (char)('a' + Stack.top()) << " ";
		Stack.pop();
	}
}

void printOrder(string words[], int n, int alpha)
{
	// Create a Graph
	Graph g(alpha);

	for (int i = 0; i < n - 1; i++)
	{
		string word1 = words[i], word2 = words[i + 1];
		for (int j = 0; j < min(word1.length(), word2.length()); j++)
		{
			if (word1[j] != word2[j])
			{
				int from = word1[j] - 'a';
				int to = word2[j] - 'a';
				g.addEdge(from, to);
				break;
			}
		}
	}
	// Sorting pending
	g.topologicalSort();
}


// Alien Dictionary - Graph
int main()
{
	string words[] = { "caa", "aaa", "aab" };
	printOrder(words, 3, 3);
	return 0;

}
